import 'package:caffae_app/src/Global/Utils/pref_utils.dart';
import 'package:caffae_app/src/Global/Utils/size_utils.dart';
import 'package:flutter/material.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  final _appTheme = PrefUtils().getThemeData();
//
// A map of custom color themes supported by the app
  final Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  final Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.onPrimaryContainer,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: appTheme.blueGray90001,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(10.h),
          ),
          shadowColor: colorScheme.primary,
          elevation: 4,
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      inputDecorationTheme: InputDecorationTheme(
        filled: true,
        fillColor: colorScheme.onPrimaryContainer,
        contentPadding: EdgeInsets.symmetric(
          horizontal: 10.v,
          vertical: 10.h,
        ),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(10.h),
          borderSide: BorderSide(
            color: colorScheme.primary.withOpacity(1),
            width: 1,
          ),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(10.h),
          borderSide: BorderSide(
            color: colorScheme.primary.withOpacity(1),
            width: 1,
          ),
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(10.h),
          borderSide: BorderSide(
            color: colorScheme.primary.withOpacity(1),
            width: 1,
          ),
        ),
        errorBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(10.h),
          borderSide: BorderSide(
            color: colorScheme.primary.withOpacity(1),
            width: 1,
          ),
        ),
        focusedErrorBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(10.h),
          borderSide: BorderSide(
            color: colorScheme.primary.withOpacity(1),
            width: 1,
          ),
        ),
      ),
      radioTheme: RadioThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        side: const BorderSide(
          width: 1,
        ),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      floatingActionButtonTheme: FloatingActionButtonThemeData(
        backgroundColor: appTheme.blueA70004,
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: colorScheme.primary.withOpacity(1),
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyMedium: TextStyle(
          color: appTheme.blueGray90001,
          fontSize: 15.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: colorScheme.primary.withOpacity(1),
          fontSize: 9.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w400,
        ),
        headlineLarge: TextStyle(
          color: appTheme.blueA70007,
          fontSize: 30.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
        labelLarge: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 12.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
        labelMedium: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 10.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
        labelSmall: TextStyle(
          color: colorScheme.primary.withOpacity(1),
          fontSize: 9.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
        titleLarge: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 20.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w600,
        ),
        titleMedium: TextStyle(
          color: appTheme.blueA70007,
          fontSize: 18.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
        titleSmall: TextStyle(
          color: colorScheme.primary.withOpacity(1),
          fontSize: 15.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static const primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0X3F000000),
    secondaryContainer: Color(0XFF0FC0FA),

    // On colors(text colors)
    onPrimary: Color(0XFFD10000),
    onPrimaryContainer: Color(0XFFF9F5EC),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amberA400 => const Color(0XFFFFC600);

  // Black
  Color get black900 => const Color(0XFF060503);

  // Blue
  Color get blue500 => const Color(0XFF119CFD);
  Color get blueA700 => const Color(0XFF206BFD);
  Color get blueA70001 => const Color(0XFF2360EC);
  Color get blueA70002 => const Color(0XFF216CFD);
  Color get blueA70003 => const Color(0XFF2363F4);
  Color get blueA70004 => const Color(0XFF2067FD);
  Color get blueA70005 => const Color(0XFF245AFC);
  Color get blueA70006 => const Color(0XFF2166FD);
  Color get blueA70007 => const Color(0XFF2261FD);
  Color get blueA70008 => const Color(0XFF2260FD);

  // BlueGray
  Color get blueGray100 => const Color(0XFFD9D9D9);
  Color get blueGray10001 => const Color(0XFFCDCDCD);
  Color get blueGray800 => const Color(0XFF40495A);
  Color get blueGray80001 => const Color(0XFF384153);
  Color get blueGray900 => const Color(0XFF333333);
  Color get blueGray90001 => const Color(0XFF283246);

  // DeepOrange
  Color get deepOrange600 => const Color(0XFFF24E1E);

  // Gray
  Color get gray500 => const Color(0XFFA3A7AE);
  Color get gray600 => const Color(0XFF7D7676);
  Color get gray60001 => const Color(0XFF777373);
  Color get gray60002 => const Color(0XFF807F7F);
  Color get gray700 => const Color(0XFF5D5B5B);

  // Green
  Color get green700 => const Color(0XFF19B800);

  // Indigo
  Color get indigoA700 => const Color(0XFF2948FC);

  // LightBlue
  Color get lightBlueA400 => const Color(0XFF06C3FE);
  Color get lightBlueA40001 => const Color(0XFF0EC3FA);
  Color get lightBlueA40002 => const Color(0XFF0DCAFA);

  // LightGreen
  Color get lightGreenA700 => const Color(0XFF38B100);

  // Red
  Color get redA700 => const Color(0XFFFF0000);

  // White
  Color get whiteA700 => const Color(0XFFFFFFFF);

  // WhiteAF
  Color get whiteA700F9 => const Color(0XF9FEFEFE);

  // Yellow
  Color get yellow600 => const Color(0XFFFFD233);
  Color get yellow800 => const Color(0XFFDFB41B);
  Color get whiteColor => Colors.white;
  Color get blackColor => Colors.black;
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
